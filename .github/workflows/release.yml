name: Release and Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '1.0.0'

permissions:
  contents: write
  pull-requests: read
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: aws-assume-role
            asset_name: aws-assume-role-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: aws-assume-role.exe
            asset_name: aws-assume-role.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: aws-assume-role
            asset_name: aws-assume-role-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: aws-assume-role
            asset_name: aws-assume-role-macos-arm64

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        tag: ${{ github.ref }}
        overwrite: true
        make_latest: true
        release_name: "AWS Assume Role CLI ${{ github.ref_name }}"
        body: |
          # ðŸŽ‰ AWS Assume Role CLI ${{ github.ref_name }} - Release
          
          A simple command-line tool to easily switch between AWS IAM roles across different accounts, designed for SSO users.
          
          ## ðŸ“¦ Installation
          
          Download the appropriate binary for your platform from the assets below, or use package managers:
          
          ```bash
          # Homebrew (macOS/Linux)
          brew install holdennguyen/tap/aws-assume-role
          
          # Cargo (Rust)
          cargo install aws-assume-role
          ```
          
          ## ðŸš€ Quick Start
          
          ```bash
          # Configure a role
          awsr configure --name dev --role-arn arn:aws:iam::123456789012:role/DevRole --account-id 123456789012
          
          # Assume the role
          awsr assume dev
          ```

  package-deb:
    name: Build DEB package
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux binary
      run: |
        curl -L -o aws-assume-role-linux-x86_64 \
          "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/aws-assume-role-linux-x86_64"
        mkdir -p ./packaging/apt/usr/bin/
        mv aws-assume-role-linux-x86_64 ./packaging/apt/usr/bin/
    
    - name: Build DEB package
      run: |
        chmod +x ./packaging/apt/usr/bin/aws-assume-role-linux-x86_64
        mv ./packaging/apt/usr/bin/aws-assume-role-linux-x86_64 ./packaging/apt/usr/bin/aws-assume-role
        mkdir -p ./packaging/apt/usr/share/aws-assume-role
        chmod +x ./packaging/apt/DEBIAN/postinst
        chmod +x ./packaging/apt/DEBIAN/prerm
        dpkg-deb --build ./packaging/apt aws-assume-role_1.0.0_amd64.deb
    
    - name: Upload DEB package
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: aws-assume-role_1.0.0_amd64.deb
        asset_name: aws-assume-role_1.0.0_amd64.deb
        tag: ${{ github.ref }}
        overwrite: true

  package-rpm:
    name: Build RPM package
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install RPM tools
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm
    
    - name: Download Linux binary
      run: |
        curl -L -o aws-assume-role-linux-x86_64 \
          "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/aws-assume-role-linux-x86_64"
    
    - name: Build RPM package
      run: |
        mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        cp packaging/rpm/aws-assume-role.spec ~/rpmbuild/SPECS/
        cp aws-assume-role-linux-x86_64 ~/rpmbuild/SOURCES/
        rpmbuild -bb ~/rpmbuild/SPECS/aws-assume-role.spec
        find ~/rpmbuild/RPMS/x86_64/ -name "aws-assume-role-*.rpm" -exec cp {} ./ \;
    
    - name: Upload RPM package
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: aws-assume-role-*.rpm
        file_glob: true
        tag: ${{ github.ref }}
        overwrite: true

  package-chocolatey:
    name: Build Chocolatey package
    runs-on: windows-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    
    - name: Build Chocolatey package
      run: |
        cd packaging/chocolatey
        choco pack aws-assume-role.nuspec
    
    - name: Upload Chocolatey package
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: packaging/chocolatey/aws-assume-role.1.0.0.nupkg
        asset_name: aws-assume-role.1.0.0.nupkg
        tag: ${{ github.ref }}
        overwrite: true

  publish-cargo:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  create-multi-shell-package:
    name: Create multi-shell distribution package
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all binaries
      run: |
        mkdir -p temp-binaries
        curl -L -o temp-binaries/aws-assume-role-macos-x86_64 \
          "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/aws-assume-role-macos-x86_64"
        curl -L -o temp-binaries/aws-assume-role-macos-arm64 \
          "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/aws-assume-role-macos-arm64"
        curl -L -o temp-binaries/aws-assume-role-linux-x86_64 \
          "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/aws-assume-role-linux-x86_64"
        curl -L -o temp-binaries/aws-assume-role.exe \
          "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/aws-assume-role.exe"
    
    - name: Prepare binaries for distribution
      run: |
        # Copy binaries (skip universal macOS binary creation on Linux)
        cp temp-binaries/aws-assume-role-macos-x86_64 releases/multi-shell/aws-assume-role-macos
        cp temp-binaries/aws-assume-role-linux-x86_64 releases/multi-shell/aws-assume-role-unix
        cp temp-binaries/aws-assume-role.exe releases/multi-shell/
        
        # Make binaries executable
        chmod +x releases/multi-shell/aws-assume-role-*
    
    - name: Create distribution packages
      run: |
        cd releases/multi-shell
        ./create-distribution.sh
    
    - name: Upload distribution packages
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: releases/multi-shell/dist/aws-assume-role-cli-*
        file_glob: true
        tag: ${{ github.ref }}
        overwrite: true

  publish-container:
    name: Build and publish Docker container
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download Linux binary
      run: |
        curl -L -o aws-assume-role-linux-x86_64 \
          "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/aws-assume-role-linux-x86_64"
        mkdir -p target/release/
        mv aws-assume-role-linux-x86_64 target/release/aws-assume-role
        chmod +x target/release/aws-assume-role
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 