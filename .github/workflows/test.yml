name: Test Suite

on:
  push:
    branches: [ master, develop, 'feature/*', 'release/*', 'hotfix/*' ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: stable
            coverage: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Run unit tests
      run: cargo test --verbose --lib

    - name: Run integration tests
      run: cargo test --verbose --test integration_tests

    - name: Run documentation tests
      run: cargo test --verbose --doc

    - name: Install tarpaulin (coverage)
      if: matrix.coverage
      run: cargo install cargo-tarpaulin

    - name: Generate coverage report
      if: matrix.coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

    - name: Upload coverage to Codecov
      if: matrix.coverage
      uses: codecov/codecov-action@v3
      with:
        file: cobertura.xml
        fail_ci_if_error: false

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --verbose

    - name: List benchmark output files
      run: find target/criterion -name "*.json" -type f | head -10

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion/*/reports/benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: false
      continue-on-error: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit --ignore RUSTSEC-2020-0071
      continue-on-error: true

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Check if cargo-deny config exists
      run: |
        if [ ! -f "deny.toml" ]; then
          echo "Creating basic deny.toml configuration"
          cat > deny.toml << 'EOF'
        [graph]
        targets = [
            { triple = "x86_64-unknown-linux-gnu" },
            { triple = "x86_64-unknown-linux-musl" },
            { triple = "x86_64-pc-windows-msvc" },
            { triple = "x86_64-apple-darwin" },
        ]

        [output]
        feature-depth = 1

        [advisories]
        vulnerability = "warn"
        unmaintained = "warn"
        yanked = "warn"
        notice = "warn"

        [licenses]
        unlicensed = "deny"
        allow = [
            "MIT",
            "Apache-2.0",
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
        ]

        [bans]
        multiple-versions = "warn"
        wildcards = "allow"

        [sources]
        unknown-registry = "warn"
        unknown-git = "warn"
        EOF
        fi

    - name: Run cargo-deny
      run: cargo deny check advisories
      continue-on-error: true

  minimal-versions:
    name: Minimal Versions
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-hack
      run: cargo install cargo-hack

    - name: Check minimal versions
      run: cargo hack check --feature-powerset --no-dev-deps
      continue-on-error: true

  cross-compile:
    name: Cross Compilation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      run: cargo install cross

    - name: Cross compile
      run: cross build --target ${{ matrix.target }} --release

  integration-test:
    name: Extended Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build release binary
      run: cargo build --release

    - name: Run CLI integration tests
      run: |
        # Test CLI help
        ./target/release/aws-assume-role --help
        
        # Test version output
        ./target/release/aws-assume-role --version
        
        # Test subcommand help
        ./target/release/aws-assume-role configure --help
        ./target/release/aws-assume-role assume --help
        ./target/release/aws-assume-role list --help
        ./target/release/aws-assume-role verify --help
        ./target/release/aws-assume-role remove --help

    - name: Test error handling
      run: |
        # Test invalid commands (should fail)
        if ./target/release/aws-assume-role invalid-command; then
          echo "Expected command to fail but it succeeded"
          exit 1
        fi
        
        # Test missing arguments (should fail)
        if ./target/release/aws-assume-role configure; then
          echo "Expected command to fail but it succeeded"  
          exit 1
        fi

  test-matrix-summary:
    name: Test Matrix Summary
    runs-on: ubuntu-latest
    needs: [test, cross-compile]
    if: always()

    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "❌ Tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.cross-compile.result }}" != "success" ]]; then
          echo "❌ Cross compilation failed"
          exit 1
        fi
        
        echo "✅ Core tests passed successfully!"
        echo "ℹ️  Security audit and minimal versions are advisory checks" 