name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*', 'hotfix/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (for manual releases)'
        required: false
        default: ''

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ============================================================================
  # Quality Gates - Run on every push/PR (MUST PASS)
  # ============================================================================
  quality:
    name: Code Quality & Testing
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy linting
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build debug
      run: cargo build --verbose

    - name: Build release
      run: cargo build --release --verbose

    - name: Run unit tests
      run: cargo test --lib --verbose

    - name: Run integration tests
      run: cargo test --test integration_tests --verbose

    - name: Run shell integration tests
      run: cargo test --test shell_integration_tests --verbose

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}
        path: target/debug/deps/aws_assume_role-*

  # ============================================================================
  # Security & Performance - Run on main/develop (Advisory)
  # ============================================================================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit --ignore RUSTSEC-2020-0071 --ignore RUSTSEC-2024-0384

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --verbose

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/

  # ============================================================================
  # Cross-Platform Builds - Run on main/develop and tags
  # ============================================================================
  build:
    name: Cross-Platform Build
    runs-on: ${{ matrix.os }}
    needs: quality
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: aws-assume-role
            asset_name: aws-assume-role-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: aws-assume-role.exe
            asset_name: aws-assume-role-windows.exe
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: aws-assume-role
            asset_name: aws-assume-role-macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

    - name: Build cross-platform binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary for upload
      shell: bash
      run: |
        mkdir -p releases/
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} releases/${{ matrix.asset_name }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.os }}-${{ matrix.target }}
        path: releases/${{ matrix.asset_name }}

  # ============================================================================
  # Package Creation - Run on tags only
  # ============================================================================
  package:
    name: Create Distribution Packages
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux binary
      uses: actions/download-artifact@v4
      with:
        name: binary-ubuntu-latest-x86_64-unknown-linux-gnu
        path: releases/

    - name: Download Windows binary
      uses: actions/download-artifact@v4
      with:
        name: binary-windows-latest-x86_64-pc-windows-msvc
        path: releases/

    - name: Download macOS binary
      uses: actions/download-artifact@v4
      with:
        name: binary-macos-latest-aarch64-apple-darwin
        path: releases/

    - name: Make binaries executable
      run: chmod +x releases/aws-assume-role-*

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create universal bash wrapper
      run: |
        # Create the universal bash wrapper
        cat > releases/aws-assume-role-bash.sh << 'EOF'
        #!/bin/bash
        
        # AWS Assume Role CLI - Universal Bash Wrapper
        # Detects platform and executes appropriate binary
        
        set -euo pipefail
        
        # Get script directory
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        
        # Detect platform
        case "$(uname -s)" in
            Linux*)     BINARY="$SCRIPT_DIR/aws-assume-role-linux" ;;
            Darwin*)    BINARY="$SCRIPT_DIR/aws-assume-role-macos" ;;
            MINGW*|MSYS*|CYGWIN*) BINARY="$SCRIPT_DIR/aws-assume-role-windows.exe" ;;
            *)          echo "❌ Unsupported platform: $(uname -s)" >&2; exit 1 ;;
        esac
        
        # Check if binary exists
        if [[ ! -f "$BINARY" ]]; then
            echo "❌ Binary not found: $BINARY" >&2
            echo "Available files:" >&2
            ls -la "$SCRIPT_DIR"/ >&2
            exit 1
        fi
        
        # Execute with all arguments
        exec "$BINARY" "$@"
        EOF
        chmod +x releases/aws-assume-role-bash.sh

    - name: Create distribution packages using release script
      run: ./scripts/release.sh package ${{ steps.version.outputs.VERSION }}

    - name: Upload distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: distribution-packages
        path: releases/dist/

  # ============================================================================
  # GitHub Release - Run on tags only
  # ============================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [package]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: distribution-packages
        path: releases/dist/

    - name: Download Linux binary
      uses: actions/download-artifact@v4
      with:
        name: binary-ubuntu-latest-x86_64-unknown-linux-gnu
        path: releases/

    - name: Download Windows binary
      uses: actions/download-artifact@v4
      with:
        name: binary-windows-latest-x86_64-pc-windows-msvc
        path: releases/

    - name: Download macOS binary
      uses: actions/download-artifact@v4
      with:
        name: binary-macos-latest-aarch64-apple-darwin
        path: releases/

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Read release notes
      id: release_notes
      run: |
        if [ -f "release-notes/RELEASE_NOTES_v${{ steps.version.outputs.VERSION }}.md" ]; then
          echo "RELEASE_NOTES_FILE=release-notes/RELEASE_NOTES_v${{ steps.version.outputs.VERSION }}.md" >> $GITHUB_OUTPUT
          echo "HAS_RELEASE_NOTES=true" >> $GITHUB_OUTPUT
        else
          echo "HAS_RELEASE_NOTES=false" >> $GITHUB_OUTPUT
        fi

    - name: Create default release body if no release notes
      if: steps.release_notes.outputs.HAS_RELEASE_NOTES == 'false'
      run: |
        cat > temp_release_body.md << EOF
        # 🎉 AWS Assume Role CLI ${{ steps.version.outputs.VERSION }}
        
        A simple command-line tool to easily switch between AWS IAM roles across different accounts, designed for SSO users.
        
        ## 📦 Installation
        
        Download the appropriate binary for your platform from the assets below, or use package managers:
        
        \`\`\`bash
        # Homebrew (macOS/Linux)
        brew tap holdennguyen/tap
        brew install aws-assume-role
        
        # Cargo (Rust)
        cargo install aws-assume-role
        
        # Direct download and install
        curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/aws-assume-role-cli-v${{ steps.version.outputs.VERSION }}.tar.gz | tar -xz
        cd aws-assume-role-cli-v${{ steps.version.outputs.VERSION }}
        ./INSTALL.sh
        \`\`\`
        
        ## 🚀 Quick Start
        
        \`\`\`bash
        # Configure a role
        awsr configure --name dev --role-arn arn:aws:iam::123456789012:role/DevRole --account-id 123456789012
        
        # Assume the role
        awsr assume dev
        \`\`\`
        
        ## 📋 What's New
        
        See the full changelog and documentation at: https://github.com/${{ github.repository }}
        EOF
        echo "RELEASE_NOTES_FILE=temp_release_body.md" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body_path: ${{ steps.release_notes.outputs.RELEASE_NOTES_FILE || 'temp_release_body.md' }}
        draft: false
        prerelease: false
        files: |
          releases/aws-assume-role-linux
          releases/aws-assume-role-macos
          releases/aws-assume-role-windows.exe
          releases/aws-assume-role-bash.sh
          releases/dist/*.tar.gz
          releases/dist/*.zip
          releases/dist/*.sha256

  # ============================================================================
  # Distribution Publishing - Run on tags only
  # ============================================================================
  publish-cargo:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Verify Cargo.toml version matches tag
      run: |
        CARGO_VERSION=$(grep '^version =' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        TAG_VERSION="${{ steps.version.outputs.VERSION }}"
        echo "Cargo.toml version: $CARGO_VERSION"
        echo "Git tag version: $TAG_VERSION"
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version mismatch! Cargo.toml has '$CARGO_VERSION' but tag is '$TAG_VERSION'"
          echo "Please run './scripts/release.sh prepare $TAG_VERSION' to fix version mismatch"
          exit 1
        fi
        echo "✅ Version verified: $CARGO_VERSION"

    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        if [ -n "$CARGO_REGISTRY_TOKEN" ]; then
          cargo publish --token $CARGO_REGISTRY_TOKEN
          echo "✅ Published to crates.io"
        else
          echo "⚠️ CARGO_REGISTRY_TOKEN not set, skipping crates.io publish"
        fi

  publish-homebrew:
    name: Update Homebrew Tap
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download binaries for checksums
      uses: actions/download-artifact@v4
      with:
        name: binaries
        path: releases/

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update Homebrew tap
      env:
        HOMEBREW_TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
      run: |
        if [ -n "$HOMEBREW_TAP_TOKEN" ]; then
          # Calculate checksums
          MACOS_SHA256=$(shasum -a 256 releases/aws-assume-role-macos | cut -d' ' -f1)
          LINUX_SHA256=$(shasum -a 256 releases/aws-assume-role-linux | cut -d' ' -f1)
          WINDOWS_SHA256=$(shasum -a 256 releases/aws-assume-role-windows.exe | cut -d' ' -f1)
          
          echo "Calculated checksums:"
          echo "macOS: $MACOS_SHA256"
          echo "Linux: $LINUX_SHA256"
          echo "Windows: $WINDOWS_SHA256"
          
          # Clone homebrew tap
          git clone https://x-access-token:$HOMEBREW_TAP_TOKEN@github.com/holdennguyen/homebrew-tap.git
          cd homebrew-tap
          
          # Create Formula directory if it doesn't exist
          mkdir -p Formula
          
          # Update formula (copy from packaging/homebrew if it exists, otherwise create basic one)
          if [ -f "../packaging/homebrew/aws-assume-role.rb" ]; then
            cp ../packaging/homebrew/aws-assume-role.rb Formula/
          else
            # Create basic formula
            cat > Formula/aws-assume-role.rb << EOF
        class AwsAssumeRole < Formula
          desc "Simple command-line tool to switch between AWS IAM roles"
          homepage "https://github.com/holdennguyen/aws-assume-role"
          version "${{ steps.version.outputs.VERSION }}"
          
          if OS.mac? && Hardware::CPU.arm?
            url "https://github.com/holdennguyen/aws-assume-role/releases/download/v${{ steps.version.outputs.VERSION }}/aws-assume-role-macos"
            sha256 "$MACOS_SHA256"
          elsif OS.mac?
            url "https://github.com/holdennguyen/aws-assume-role/releases/download/v${{ steps.version.outputs.VERSION }}/aws-assume-role-macos"
            sha256 "$MACOS_SHA256"
          elsif OS.linux?
            url "https://github.com/holdennguyen/aws-assume-role/releases/download/v${{ steps.version.outputs.VERSION }}/aws-assume-role-linux"
            sha256 "$LINUX_SHA256"
          end
          
          def install
            bin.install Dir["aws-assume-role*"].first => "aws-assume-role"
            bin.install_symlink "aws-assume-role" => "awsr"
          end
          
          test do
            system "#{bin}/aws-assume-role", "--version"
          end
        end
        EOF
          fi
          
          # Update version and checksums in formula
          sed -i "s/version \".*\"/version \"${{ steps.version.outputs.VERSION }}\"/" Formula/aws-assume-role.rb
          sed -i "s|download/v[^/]*/|download/v${{ steps.version.outputs.VERSION }}/|g" Formula/aws-assume-role.rb
          
          # Update checksums (handle different formats)
          sed -i "s/sha256 \"[^\"]*\" # macos/sha256 \"$MACOS_SHA256\" # macos/" Formula/aws-assume-role.rb
          sed -i "s/sha256 \"[^\"]*\" # linux/sha256 \"$LINUX_SHA256\" # linux/" Formula/aws-assume-role.rb
          # Also handle direct sha256 lines
          sed -i "0,/sha256 \"[^\"]*\"/{s/sha256 \"[^\"]*\"/sha256 \"$MACOS_SHA256\"/}" Formula/aws-assume-role.rb
          
          # Commit and push
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/aws-assume-role.rb
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update aws-assume-role to v${{ steps.version.outputs.VERSION }}"
            git push
            echo "✅ Updated Homebrew tap"
          fi
        else
          echo "⚠️ HOMEBREW_TAP_TOKEN not set, skipping Homebrew publish"
        fi

  publish-container:
    name: Build and Push Container Image
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download binaries
      uses: actions/download-artifact@v4
      with:
        name: binaries
        path: releases/

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/aws-assume-role:latest
          ghcr.io/${{ github.repository_owner }}/aws-assume-role:v${{ steps.version.outputs.VERSION }}
          ghcr.io/${{ github.repository_owner }}/aws-assume-role:${{ steps.version.outputs.VERSION }}
        labels: |
          org.opencontainers.image.title=AWS Assume Role CLI
          org.opencontainers.image.description=A simple command-line tool to easily switch between AWS IAM roles
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.licenses=AGPL-3.0-or-later
          org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
          org.opencontainers.image.revision=${{ github.sha }}

  # ============================================================================
  # Deployment Notification - Run after successful release
  # ============================================================================
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [release, publish-cargo, publish-homebrew, publish-container]
    if: startsWith(github.ref, 'refs/tags/v') && success()
    
    steps:
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Notify success
      run: |
        echo "🎉 Successfully released AWS Assume Role CLI v${{ steps.version.outputs.VERSION }}"
        echo ""
        echo "📦 Available on:"
        echo "  - GitHub Releases: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.VERSION }}"
        echo "  - crates.io: https://crates.io/crates/aws-assume-role"
        echo "  - Homebrew: brew tap holdennguyen/tap && brew install aws-assume-role"
        echo "  - Container: docker pull ghcr.io/${{ github.repository_owner }}/aws-assume-role:v${{ steps.version.outputs.VERSION }}"
        echo ""
        echo "🚀 Installation:"
        echo "  # Direct binary download"
        echo "  curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/aws-assume-role-cli-v${{ steps.version.outputs.VERSION }}.tar.gz | tar -xz"
        echo "  cd aws-assume-role-cli-v${{ steps.version.outputs.VERSION }} && ./INSTALL.sh"
        echo ""
        echo "  # Cargo (Rust)"
        echo "  cargo install aws-assume-role"
        echo ""
        echo "  # Homebrew"
        echo "  brew tap holdennguyen/tap && brew install aws-assume-role"
        echo ""
        echo "  # Container"
        echo "  docker run --rm -v ~/.aws:/home/awsuser/.aws ghcr.io/${{ github.repository_owner }}/aws-assume-role:v${{ steps.version.outputs.VERSION }} awsr --help"

  # ============================================================================
  # Test Summary - Always run to provide clear feedback
  # ============================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [quality]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.quality.result }}" != "success" ]]; then
          echo "❌ Quality gates failed - check the logs above"
          echo ""
          echo "Common fixes:"
          echo "  - Run 'cargo fmt' to fix formatting"
          echo "  - Run 'cargo clippy -- -D warnings' to fix linting"
          echo "  - Run 'cargo test' to fix failing tests"
          echo ""
          exit 1
        fi
        
        echo "✅ All quality gates passed successfully!"
        echo ""
        echo "ℹ️  Optional jobs (security audit, benchmarks) are advisory"
        echo "ℹ️  Build and release jobs run based on branch/tag triggers" 