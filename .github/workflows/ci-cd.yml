name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*', 'hotfix/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (for manual releases)'
        required: false
        default: ''

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ============================================================================
  # Quality Gates - Run on every push/PR (MUST PASS)
  # ============================================================================
  quality:
    name: Code Quality & Testing
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy linting
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build debug
      run: cargo build --verbose

    - name: Build release
      run: cargo build --release --verbose

    - name: Run unit tests
      run: cargo test --lib --verbose

    - name: Run integration tests
      run: cargo test --test integration_tests --verbose

    - name: Run shell integration tests
      run: cargo test --test shell_integration_tests --verbose

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}
        path: target/debug/deps/aws_assume_role-*

  # ============================================================================
  # Security & Performance - Run on main/develop (Advisory)
  # ============================================================================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit --ignore RUSTSEC-2020-0071 --ignore RUSTSEC-2024-0384

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --verbose

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/

  # ============================================================================
  # Cross-Platform Builds - Run on main/develop and tags
  # ============================================================================
  build:
    name: Cross-Platform Build
    runs-on: ${{ matrix.os }}
    needs: quality
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: aws-assume-role
            asset_name: aws-assume-role-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: aws-assume-role.exe
            asset_name: aws-assume-role-windows.exe
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: aws-assume-role
            asset_name: aws-assume-role-macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

    - name: Build cross-platform binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary for upload
      shell: bash
      run: |
        mkdir -p releases/
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} releases/${{ matrix.asset_name }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.os }}-${{ matrix.target }}
        path: releases/${{ matrix.asset_name }}

  # ============================================================================
  # Package Creation - Run on tags only
  # ============================================================================
  package:
    name: Create Distribution Packages
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Stage binaries for packaging
      shell: bash
      run: |
        mkdir -p releases
        cp artifacts/binary-ubuntu-latest-x86_64-unknown-linux-gnu/aws-assume-role-linux releases/
        cp artifacts/binary-windows-latest-x86_64-pc-windows-msvc/aws-assume-role-windows.exe releases/
        cp artifacts/binary-macos-latest-aarch64-apple-darwin/aws-assume-role-macos releases/
        
        ls -la releases/

    - name: Make binaries executable
      run: chmod +x releases/aws-assume-role-linux releases/aws-assume-role-macos

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create universal bash wrapper
      run: |
        # Create the universal bash wrapper
        cat > releases/aws-assume-role-bash.sh << 'EOF'
        #!/bin/bash
        
        # AWS Assume Role CLI - Universal Bash Wrapper
        # Detects platform and executes appropriate binary
        
        set -euo pipefail
        
        # Get script directory
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        
        # OS Detection with Debugging
        os_type=""
        echo "[awsr debug] OSTYPE: $OSTYPE" >&2
        echo "[awsr debug] uname -s: $(uname -s)" >&2
        
        case "$OSTYPE" in
          linux-gnu*) os_type="linux" ;;
          darwin*)    os_type="macos" ;;
          cygwin|msys|win32) os_type="windows" ;;
          *)
            # Fallback to uname for other environments (like Git Bash on Windows)
            case "$(uname -s)" in
              Linux*)   os_type="linux" ;;
              Darwin*)  os_type="macos" ;;
              MINGW*|MSYS*|CYGWIN*) os_type="windows" ;;
              *)
                echo "❌ Unsupported platform. OSTYPE: $OSTYPE, uname: $(uname -s)" >&2
                exit 1
                ;;
            esac
            ;;
        esac

        echo "[awsr debug] Detected OS: $os_type" >&2
        
        case "$os_type" in
          linux)   BINARY="$SCRIPT_DIR/aws-assume-role-linux" ;;
          macos)   BINARY="$SCRIPT_DIR/aws-assume-role-macos" ;;
          windows) BINARY="$SCRIPT_DIR/aws-assume-role-windows.exe" ;;
        esac
        
        # Check if binary exists
        if [[ ! -f "$BINARY" ]]; then
            echo "❌ Binary not found for detected OS '$os_type': $BINARY" >&2
            echo "Available files in $SCRIPT_DIR:" >&2
            ls -la "$SCRIPT_DIR"/ >&2
            exit 1
        fi
        
        # Execute with all arguments
        exec "$BINARY" "$@"
        EOF
        chmod +x releases/aws-assume-role-bash.sh

    - name: Create distribution packages using release script
      run: ./scripts/release.sh package ${{ steps.version.outputs.VERSION }}

    - name: Upload distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: distribution-packages
        path: releases/dist/

  # ============================================================================
  # Release to GitHub - Run on tags only
  # ============================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, package]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Download packaged distributions
      uses: actions/download-artifact@v4
      with:
        name: packages
        path: releases/dist

    - name: Stage binaries for release
      shell: bash
      run: |
        mkdir -p releases
        cp artifacts/binary-ubuntu-latest-x86_64-unknown-linux-gnu/aws-assume-role-linux releases/
        cp artifacts/binary-windows-latest-x86_64-pc-windows-msvc/aws-assume-role-windows.exe releases/
        cp artifacts/binary-macos-latest-aarch64-apple-darwin/aws-assume-role-macos releases/
        
        ls -la releases/
        ls -la releases/dist/

    - name: Upload staged release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: releases/

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Read release notes
      id: release_notes
      run: |
        if [ -f "release-notes/RELEASE_NOTES_v${{ steps.version.outputs.VERSION }}.md" ]; then
          echo "RELEASE_NOTES_FILE=release-notes/RELEASE_NOTES_v${{ steps.version.outputs.VERSION }}.md" >> $GITHUB_OUTPUT
          echo "HAS_RELEASE_NOTES=true" >> $GITHUB_OUTPUT
        else
          echo "HAS_RELEASE_NOTES=false" >> $GITHUB_OUTPUT
        fi

    - name: Create default release body if no release notes
      if: steps.release_notes.outputs.HAS_RELEASE_NOTES == 'false'
      run: |
        cat > temp_release_body.md << EOF
        # 🎉 AWS Assume Role CLI ${{ steps.version.outputs.VERSION }}
        
        A simple command-line tool to easily switch between AWS IAM roles across different accounts, designed for SSO users.
        
        ## 📦 Installation
        
        Download the appropriate binary for your platform from the assets below, or use package managers:
        
        \`\`\`bash
        # Homebrew (macOS/Linux)
        brew tap holdennguyen/tap
        brew install aws-assume-role
        
        # Cargo (Rust)
        cargo install aws-assume-role
        
        # Direct download and install
        curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/aws-assume-role-cli-v${{ steps.version.outputs.VERSION }}.tar.gz | tar -xz
        cd aws-assume-role-cli-v${{ steps.version.outputs.VERSION }}
        ./INSTALL.sh
        \`\`\`
        
        ## 🚀 Quick Start
        
        \`\`\`bash
        # Configure a role
        awsr configure --name dev --role-arn arn:aws:iam::123456789012:role/DevRole --account-id 123456789012
        
        # Assume the role
        awsr assume dev
        \`\`\`
        
        ## 📋 What's New
        
        See the full changelog and documentation at: https://github.com/${{ github.repository }}
        EOF
        echo "RELEASE_NOTES_FILE=temp_release_body.md" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body_path: ${{ steps.release_notes.outputs.RELEASE_NOTES_FILE }}
        draft: false
        prerelease: false
        files: |
          releases/aws-assume-role-linux
          releases/aws-assume-role-macos
          releases/aws-assume-role-windows.exe
          releases/dist/*.tar.gz
          releases/dist/*.zip
          releases/dist/*.sha256

  # ============================================================================
  # Documentation & Final Steps - Run on main branch
  # ============================================================================
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Generate cargo-readme
      run: |
        cargo install cargo-readme
        cargo readme > README.md

    - name: Commit and push changes
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "docs: update README with latest options"
        branch: main
        file_pattern: README.md

# ==============================================================================
# Final Summary Job
# ==============================================================================
  summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: [quality, security-audit, benchmark, build, package, release, docs]
    if: always()

    steps:
    - name: Summarize workflow run
      run: |
        echo "### CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---|---|" >> $GITHUB_STEP_SUMMARY
        echo "| Quality & Testing | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Benchmarks | ${{ needs.benchmark.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cross-Platform Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Package Creation | ${{ needs.package.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| GitHub Release | ${{ needs.release.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.docs.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Workflow complete. Check job logs for details." >> $GITHUB_STEP_SUMMARY
        echo "ℹ️  Optional jobs (security audit, benchmarks) are advisory"
        echo "ℹ️  Build and release jobs run based on branch/tag triggers"

  publish-homebrew:
    name: Update Homebrew Tap
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release assets
      uses: actions/download-artifact@v4
      with:
        name: release-assets
        path: releases/

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update Homebrew tap
      env:
        HOMEBREW_TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
      run: |
        if [ -z "$HOMEBREW_TAP_TOKEN" ]; then
          echo "⚠️ HOMEBREW_TAP_TOKEN not set, skipping Homebrew publish"
          exit 0
        fi

        # Calculate checksums
        MACOS_SHA256=$(shasum -a 256 releases/aws-assume-role-macos | cut -d' ' -f1)
        LINUX_SHA256=$(shasum -a 256 releases/aws-assume-role-linux | cut -d' ' -f1)
        
        echo "Calculated checksums:"
        echo "macOS: $MACOS_SHA256"
        echo "Linux: $LINUX_SHA256"
        
        # Clone homebrew tap
        git clone https://x-access-token:$HOMEBREW_TAP_TOKEN@github.com/holdennguyen/homebrew-tap.git
        cd homebrew-tap
        
        # Create Formula directory if it doesn't exist
        mkdir -p Formula
        
        # Update formula from existing file in packaging/homebrew
        if [ -f "../packaging/homebrew/aws-assume-role.rb" ]; then
          cp ../packaging/homebrew/aws-assume-role.rb Formula/
        else
          echo "❌ packaging/homebrew/aws-assume-role.rb not found!"
          exit 1
        fi
        
        # Replace version and checksums
        sed -i.bak "s/version \".*\"/version \"${{ steps.version.outputs.VERSION }}\"/" Formula/aws-assume-role.rb
        sed -i.bak "s|url \"https://github.com/holdennguyen/aws-assume-role/releases/download/v.*/aws-assume-role-macos\"|url \"https://github.com/holdennguyen/aws-assume-role/releases/download/v${{ steps.version.outputs.VERSION }}/aws-assume-role-macos\"|" Formula/aws-assume-role.rb
        sed -i.bak "s/sha256 \".*\" # macos/sha256 \"$MACOS_SHA256\" # macos/" Formula/aws-assume-role.rb
        sed -i.bak "s|url \"https://github.com/holdennguyen/aws-assume-role/releases/download/v.*/aws-assume-role-linux\"|url \"https://github.com/holdennguyen/aws-assume-role/releases/download/v${{ steps.version.outputs.VERSION }}/aws-assume-role-linux\"|" Formula/aws-assume-role.rb
        sed -i.bak "s/sha256 \".*\" # linux/sha256 \"$LINUX_SHA256\" # linux/" Formula/aws-assume-role.rb
        
        # Commit and push
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add Formula/aws-assume-role.rb
        
        if git diff --staged --quiet; then
          echo "No changes to Homebrew tap formula."
        else
          git commit -m "Update aws-assume-role to v${{ steps.version.outputs.VERSION }}"
          git push
          echo "✅ Successfully updated Homebrew tap."
        fi

  publish-container:
    name: Build and Push Container Image
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release assets
      uses: actions/download-artifact@v4
      with:
        name: release-assets
        path: releases/

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build container image
      run: docker build -t ${{ github.repository }}:${{ steps.version.outputs.VERSION }} .

    - name: Push container image
      run: docker push ${{ github.repository }}:${{ steps.version.outputs.VERSION }} 